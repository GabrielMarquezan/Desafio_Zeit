import pandas as pd
import numpy as np
from sklearn.preprocessing import StandardScaler
from sklearn.preprocessing import LabelEncoder
from sklearn.decomposition import PCA
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.svm import SVR
from sklearn.metrics import mean_absolute_percentage_error, mean_squared_error, r2_score
import matplotlib.pyplot as plt

random_seed = 42
data = pd.read_csv('housing.csv')

data.shape

data

data['ocean_proximity'].unique()

encoder = LabelEncoder()
data['ocean_proximity'] = encoder.fit_transform(data['ocean_proximity'])
data['ocean_proximity'].unique()

for i in data.columns:
    if data[i].isnull().sum() > 0:
        print(f'Coluna {i} tem {data[i].isnull().sum()} valores nulos')

data['total_bedrooms'].fillna(data['total_bedrooms'].mean(), inplace=True)
data['total_bedrooms'].isnull().sum()

Scaler = StandardScaler()
data_scaled = pd.DataFrame(Scaler.fit_transform(data), columns=data.columns)

x = data_scaled.drop(columns=['median_house_value'])
y = data_scaled['median_house_value']

gridsearch = GridSearchCV(SVR(), param_grid={'kernel': ['linear', 'poly', 'rbf', 'sigmoid'], 'C': [0.1, 1, 10, 100]}, cv=5)
gridsearch.fit(x, y)
gridsearch.best_params_

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=random_seed)
model = SVR(kernel='RBF', C=1.0, gamma='scale', epsilon=0.1)
model.fit(x_train, y_train)
y_pred = model.predict(x_test)

mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
mape = mean_absolute_percentage_error(y_test, y_pred)
rmse = np.sqrt(mse)

print(f'MSE: {mse}')
print(f'R2: {r2}')
print(f'MAPE: {mape}')
print(f'RMSE: {rmse}')

plt.scatter(y_test, y_pred, alpha=0.5)